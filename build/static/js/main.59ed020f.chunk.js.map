{"version":3,"sources":["components/VideoPlayer/VideoPlayer.tsx","Models/General.ts","components/Videos/Videos.tsx","Models/Topics.ts","components/Topics/Topics.tsx","Models/Questions.ts","components/Test/Test.tsx","components/Quizes/Quizes.tsx","components/Main/Main.tsx","serviceWorker.ts","index.tsx"],"names":["VideoPlayer","videoRef","state","isPlaying","this","pause","play","setState","btnText","className","props","title","description","ref","onEnded","src","url","type","onClick","PureComponent","VIDEO","Videos","TOPIC_LIST","id","heading","desc","Topics","selectedTopic","topic","onTestStartEmit","style","maxWidth","map","key","onTopicClick","disabled","onTestStart","QUESTIONS","qId","caption","question","options","correct","Test","QUESTIONS_LIST","questionsList","currQuestion","currQuesCounter","timer","selectedAnswer","testScore","wrong","total","length","_SET_INTERVAL","_getSingleQuestion","setInterval","clearInterval","optionIndex","indexOf","isCorrect","correctAnsIndex","includes","onTestEndEmit","currQues","option","onOptionClick","submitAnswer","Quizes","STATE","console","log","retake","Main","exact","to","activeClassName","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6WASqBA,G,iNACnBC,c,IACAC,MAAQ,CACNC,WAAW,G,yEAIX,IAAIA,GAAY,EACZC,KAAKF,MAAMC,UACbC,KAAKH,SAASI,SAEdD,KAAKH,SAASK,OACdH,GAAY,GAEdC,KAAKG,SAAS,CAAEJ,gB,+BAGR,IAAD,OACHK,EAAU,OAId,OAHIJ,KAAKF,MAAMC,YACbK,EAAU,SAGV,yBAAKC,UAAU,mBACb,4BAAKL,KAAKM,MAAMC,OAChB,4BAAKP,KAAKM,MAAME,aAChB,2BAAOC,IAAK,SAACA,GAAD,OAAS,EAAKZ,SAAWY,GAAKJ,UAAU,QAAQK,QAAS,kBAAM,EAAKP,SAAS,CAAEJ,WAAW,MACpG,4BAAQY,IAAKX,KAAKM,MAAMM,IAAKC,KAAK,eAEpC,yBAAKR,UAAU,wBACb,4BAAQS,QAAS,kBAAM,EAAKA,YAAYV,S,GA9BTW,kBCT5BC,EACF,oBADEA,EAEI,6PAFJA,EAGJ,uFCOMC,EANA,WACb,OACE,kBAAC,EAAD,CAAaV,MAAOS,EAAaR,YAAaQ,EAAmBJ,IAAKI,KCN7DE,G,MAAa,CACxB,CACEC,GAAI,EACJC,QAAS,gBACTC,KAAM,oBAER,CACEF,GAAI,EACJC,QAAS,sBACTC,KAAM,sBCDWC,E,2MACnBxB,MAAQ,CACNyB,cAAe,I,EAEjBL,WAAaA,E,4EAEAM,GACXxB,KAAKG,SAAS,CAAEoB,cAAeC,M,oCAI/BxB,KAAKM,MAAMmB,gBAAgBzB,KAAKF,MAAMyB,iB,+BAG9B,IAAD,OACP,OACE,oCACE,yBAAKlB,UAAU,SACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,aAAaqB,MAAO,CAAEC,SAAU,SAA/C,SACA,yBAAKtB,UAAU,cAAf,cACA,yBAAKA,UAAU,cAAf,gBAGAL,KAAKkB,WAAWU,KAAI,SAACJ,GACnB,OACE,yBAAKnB,UAAS,kCAA6B,EAAKP,MAAMyB,cAAcJ,KAAOK,EAAML,GAAtC,iBAA8D,IAAMU,IAAKL,EAAML,GAAIL,QAAS,kBAAM,EAAKgB,aAAaN,KAC7J,yBAAKnB,UAAU,aAAaqB,MAAO,CAAEC,SAAU,SAA/C,IAA2DH,EAAML,GAAjE,MACA,yBAAKd,UAAU,cAAf,IAA8BmB,EAAMJ,QAApC,KACA,yBAAKf,UAAU,cAAf,IAA8BmB,EAAMH,KAApC,UAMV,yBAAKhB,UAAU,wBACb,4BAAQ0B,UAAW/B,KAAKF,MAAMyB,cAAcJ,GAAmBL,QAAS,kBAAM,EAAKkB,gBAAnF,oB,GApC0BjB,iBCRvBkB,EAAY,CACvB,CACEC,IAAK,EACLC,QAAS,0BACTC,SAAU,kBACVC,QAAS,CAAC,MAAO,MACjBC,QAAS,CAAC,IACT,CACDJ,IAAK,EACLC,QAAS,0BACTC,SAAU,2BACVC,QAAS,CAAC,MAAO,QAAS,SAAU,UACpCC,QAAS,CAAC,IACT,CACDJ,IAAK,EACLC,QAAS,oCACTC,SAAU,uBACVC,QAAS,CAAC,EAAG,EAAG,EAAG,GACnBC,QAAS,CAAC,EAAG,IACZ,CACDJ,IAAK,EACLC,QAAS,0BACTC,SAAU,uBACVC,QAAS,CAAC,OAAQ,SAClBC,QAAS,CAAC,IACT,CACDJ,IAAK,EACLC,QAAS,0BACTC,SAAU,4BACVC,QAAS,CAAC,EAAG,EAAG,EAAG,GACnBC,QAAS,CAAC,K,QCrBOC,G,iNACnBC,eAAiB,EAAKlC,MAAMmC,c,EAC5B3C,MAAQ,CACN4C,aAAc,GACdC,gBAAiB,EACjBC,MAAO,EACPC,eAAgB,I,EAElBC,UAAY,CACVR,QAAS,EACTS,MAAO,EACPC,MAAO,EAAK1C,MAAMmC,cAAcQ,Q,EAE1BC,mB,qFAEa,IAAD,OAClBlD,KAAKmD,qBACLnD,KAAKkD,cAAgBE,aAAY,WAC/B,EAAKjD,SAAS,CAAEyC,MAAO,EAAK9C,MAAM8C,MAAQ,MACzC,O,6CAIC5C,KAAKkD,eACPG,cAAcrD,KAAKkD,iB,oCAITI,IAC4C,IAApDtD,KAAKF,MAAM+C,eAAeU,QAAQD,IACtCtD,KAAKG,SAAS,CACZ0C,eAAe,GAAD,mBAAM7C,KAAKF,MAAM+C,gBAAjB,CAAiCS,Q,qCAIrB,IAAD,OAC3B,GAAItD,KAAKF,MAAM+C,eAAeI,SAAWjD,KAAKF,MAAM4C,aAAaJ,QAAQW,OAAQ,CAC/E,IAAIO,GAAY,EAChBxD,KAAKF,MAAM4C,aAAaJ,QAAQV,KAAI,SAAC6B,GAMnC,OAJED,IADE,EAAK1D,MAAM+C,eAAea,SAAS,EAAK5D,MAAM4C,aAAaL,QAAQoB,IAKhEA,KAELD,EACFxD,KAAK8C,UAAUR,UAEftC,KAAK8C,UAAUC,aAGjB/C,KAAK8C,UAAUC,QAEjB/C,KAAKmD,uB,2CAG6B,IAAD,OACjC,GAAInD,KAAKF,MAAM6C,iBAAmB3C,KAAKwC,eAAeS,OACpDjD,KAAKM,MAAMqD,cAAc3D,KAAK8C,eACzB,CACL,IAAMc,EAAW5D,KAAKwC,eAAexC,KAAKF,MAAM6C,iBAChD3C,KAAKG,SAAS,CACZuC,aAAckB,EACdf,eAAgB,KACf,WACD,EAAK1C,SAAS,CAAEwC,gBAAiB,EAAK7C,MAAM6C,gBAAkB,U,+BAK1D,IAAD,OACP,OACE,oCACE,yBAAKtC,UAAU,kBACb,yBAAKA,UAAU,gCACb,2CAAiBL,KAAKF,MAAM6C,gBAA5B,IAA8C3C,KAAKwC,eAAeS,QAClE,uCAAajD,KAAKF,MAAM8C,MAAxB,MAEF,yBAAKvC,UAAU,kBACb,4BAAKL,KAAKF,MAAM4C,aAAaP,SAC7B,4BAAKnC,KAAKF,MAAM4C,aAAaN,UAC5BpC,KAAKF,MAAM4C,aAAaL,QAErB,yBAAKhC,UAAU,yBAEXL,KAAKF,MAAM4C,aAAaL,QAAQT,KAAI,SAACiC,GACnC,OACE,yBAAKxD,UAAS,uBAAgE,IAA/C,EAAKP,MAAM+C,eAAeU,QAAQM,GAAiB,WAAa,IAC7FhC,IAAKgC,EACL/C,QAAS,kBAAM,EAAKgD,cAAcD,KACjCA,OAMT,OAIV,yBAAKxD,UAAU,wBACb,4BAAQ0B,UAAW/B,KAAKF,MAAM+C,eAAeI,OAC3CnC,QAAS,kBAAM,EAAKiD,iBADtB,gB,GAtGwBhD,kBCHbiD,E,2MAEnBlE,MAAQ,CACNmE,MAAO,S,EAETnB,UAAY,G,+EAEIvB,GACd2C,QAAQC,IAAI5C,GACZvB,KAAKG,SAAS,CAAE8D,MAAO,W,oCAGXnB,GACZ9C,KAAKG,SAAS,CAAE8D,MAAO,WACvBjE,KAAK8C,UAAYA,I,+BAIjB9C,KAAKG,SAAS,CAAE8D,MAAO,W,+BAGf,IAAD,OACP,OACE,oCAEyB,UAArBjE,KAAKF,MAAMmE,MACT,kBAAC,EAAD,CAAQxC,gBAAiB,SAACF,GAAD,OAA0B,EAAKE,gBAAgBF,MACtE,KAGiB,SAArBvB,KAAKF,MAAMmE,MACT,kBAAC,EAAD,CAAMN,cAAe,SAACb,GAAD,OAAoB,EAAKa,cAAcb,IAAYL,cAAeR,IACrF,KAGiB,WAArBjC,KAAKF,MAAMmE,MACT,oCACE,yBAAK5D,UAAU,kBACb,4CACA,gDAAsBL,KAAK8C,UAAUE,OACrC,wCAAchD,KAAK8C,UAAUR,SAC7B,sCAAYtC,KAAK8C,UAAUC,QAG7B,yBAAK1C,UAAU,wBACb,4BAAQS,QAAS,kBAAM,EAAKsD,WAA5B,iBAKF,U,GAlDsBrD,iBCgCrBsD,EA3BF,WACX,OACE,kBAAC,IAAD,KACE,yBAAKhE,UAAU,aACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,mBACb,kBAAC,IAAD,CAASiE,OAAK,EAACC,GAAG,IAAIC,gBAAgB,YAAtC,iBAEF,yBAAKnE,UAAU,mBACb,kBAAC,IAAD,CAASkE,GAAG,SAASC,gBAAgB,YAArC,YAGJ,yBAAKnE,UAAU,QACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOiE,OAAK,EAACG,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,UACV,kBAAC,EAAD,YCjBMC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SDqI5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.59ed020f.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport './VideoPlayer.css';\n\ninterface VideoPlayerProps {\n  url: any;\n  title: string,\n  description: string\n}\n\nexport default class VideoPlayer extends PureComponent<VideoPlayerProps> {\n  videoRef: any;\n  state = {\n    isPlaying: false\n  }\n\n  onClick(): void {\n    let isPlaying = false;\n    if (this.state.isPlaying) {\n      this.videoRef.pause();\n    } else {\n      this.videoRef.play();\n      isPlaying = true;\n    }\n    this.setState({ isPlaying });\n  }\n\n  render() {\n    let btnText = 'Play'\n    if (this.state.isPlaying) {\n      btnText = 'Pause';\n    }\n    return (\n      <div className=\"video-container\">\n        <h2>{this.props.title}</h2>\n        <h4>{this.props.description}</h4>\n        <video ref={(ref) => this.videoRef = ref} className=\"video\" onEnded={() => this.setState({ isPlaying: false })}>\n          <source src={this.props.url} type=\"video/mp4\" />\n        </video>\n        <div className=\"btn-container center\">\n          <button onClick={() => this.onClick()}>{btnText}</button>\n        </div>\n      </div >\n    );\n  };\n}","export const VIDEO = {\n  \"title\": \"For Bigger Blazes\",\n  \"description\": \"HBO GO now works with Chromecast -- the easiest way to enjoy online video on your TV. For when you want to settle into your Iron Throne to watch the latest episodes. For $35.\\nLearn how to use Chromecast with HBO GO and more at google.com/chromecast.\",\n  \"url\": \"http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerBlazes.mp4\",\n}","import React from 'react';\nimport VideoPlayer from '../VideoPlayer/VideoPlayer';\nimport { VIDEO } from '../../Models/General';\n\nconst Videos = () => {\n  return (\n    <VideoPlayer title={VIDEO.title} description={VIDEO.description} url={VIDEO.url} />\n  )\n}\n\nexport default Videos;","export const TOPIC_LIST = [\n  {\n    id: 1,\n    heading: 'True or False',\n    desc: 'descriprtions...'\n  },\n  {\n    id: 2,\n    heading: 'Addition of numbers',\n    desc: 'descriprtions...'\n  }\n];\n\nexport interface Topic {\n  id: number;\n  heading: string;\n  desc: string;\n}","import React, { PureComponent } from 'react';\nimport './Topics.css';\nimport { TOPIC_LIST, Topic } from '../../Models/Topics';\n\ninterface TopicsProps {\n  onTestStartEmit: Function;\n}\n\nexport default class Topics extends PureComponent<TopicsProps> {\n  state = {\n    selectedTopic: {} as Topic\n  }\n  TOPIC_LIST = TOPIC_LIST;\n\n  onTopicClick(topic: Topic): void {\n    this.setState({ selectedTopic: topic })\n  }\n\n  onTestStart(): void {\n    this.props.onTestStartEmit(this.state.selectedTopic);\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"table\">\n          <div className=\"table-header\">\n            <div className=\"table-cell\" style={{ maxWidth: '80px' }}>S NO.</div>\n            <div className=\"table-cell\">Topic Name</div>\n            <div className=\"table-cell\">Description</div>\n          </div>\n          {\n            this.TOPIC_LIST.map((topic: Topic) => {\n              return (\n                <div className={`table-body boder-bottom ${this.state.selectedTopic.id === topic.id ? `topic-selected` : ''}`} key={topic.id} onClick={() => this.onTopicClick(topic)}>\n                  <div className=\"table-cell\" style={{ maxWidth: '80px' }}> {topic.id}. </div>\n                  <div className=\"table-cell\"> {topic.heading} </div>\n                  <div className=\"table-cell\"> {topic.desc} </div>\n                </div>\n              )\n            })\n          }\n        </div>\n        <div className=\"btn-container center\">\n          <button disabled={!this.state.selectedTopic.id ? true : false} onClick={() => this.onTestStart()}>Start Test</button>\n        </div>\n      </>\n    );\n  };\n}","export const QUESTIONS = [\n  {\n    qId: 1,\n    caption: 'Choose the correct one.',\n    question: 'Apple is fruit?',\n    options: ['yes', 'no'],\n    correct: [0]\n  }, {\n    qId: 2,\n    caption: 'Choose the correct one.',\n    question: 'What color of orange is?',\n    options: ['red', 'green', 'yellow', 'orange'],\n    correct: [3]\n  }, {\n    qId: 3,\n    caption: 'Choose the correct one(Multiple).',\n    question: 'Choose even numbers?',\n    options: [1, 2, 5, 8],\n    correct: [1, 3]\n  }, {\n    qId: 4,\n    caption: 'Choose the correct one.',\n    question: '(10 < 1) is correct?',\n    options: ['true', 'false'],\n    correct: [1]\n  }, {\n    qId: 5,\n    caption: 'Choose the correct one.',\n    question: 'How many wheels car have?',\n    options: [5, 4, 6, 3],\n    correct: [1]\n  }\n] as any;\n\nexport interface Question {\n  qId: number,\n  caption: string,\n  question: string,\n  options: Array<string | number>,\n  correct: Array<number>\n}","import React, { PureComponent } from 'react';\nimport './Test.css';\nimport { Question } from '../../Models/Questions';\n\ninterface TestProp {\n  questionsList: any,\n  onTestEndEmit: Function\n}\n\nexport default class Test extends PureComponent<TestProp> {\n  QUESTIONS_LIST = this.props.questionsList;\n  state = {\n    currQuestion: {} as Question,\n    currQuesCounter: 0,\n    timer: 0,\n    selectedAnswer: [] as any\n  }\n  testScore = {\n    correct: 0,\n    wrong: 0,\n    total: this.props.questionsList.length\n  };\n  private _SET_INTERVAL: any;\n\n  componentDidMount() {\n    this._getSingleQuestion();\n    this._SET_INTERVAL = setInterval(() => {\n      this.setState({ timer: this.state.timer + 1 });\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    if (this._SET_INTERVAL) {\n      clearInterval(this._SET_INTERVAL);\n    }\n  }\n\n  onOptionClick(optionIndex: any): void {\n    if (this.state.selectedAnswer.indexOf(optionIndex) !== -1) return;\n    this.setState({\n      selectedAnswer: [...this.state.selectedAnswer, optionIndex]\n    });\n  }\n\n  private submitAnswer(): void {\n    if (this.state.selectedAnswer.length === this.state.currQuestion.correct.length) {\n      let isCorrect = false;\n      this.state.currQuestion.correct.map((correctAnsIndex: any) => {\n        if (this.state.selectedAnswer.includes(this.state.currQuestion.options[correctAnsIndex])) {\n          isCorrect = true;\n        } else {\n          isCorrect = false;\n        }\n        return correctAnsIndex;\n      });\n      if (isCorrect) {\n        this.testScore.correct++;\n      } else {\n        this.testScore.wrong++;\n      }\n    } else {\n      this.testScore.wrong++;\n    }\n    this._getSingleQuestion();\n  }\n\n  private _getSingleQuestion(): void {\n    if (this.state.currQuesCounter >= this.QUESTIONS_LIST.length) {\n      this.props.onTestEndEmit(this.testScore);\n    } else {\n      const currQues = this.QUESTIONS_LIST[this.state.currQuesCounter];\n      this.setState({\n        currQuestion: currQues,\n        selectedAnswer: []\n      }, () => {\n        this.setState({ currQuesCounter: this.state.currQuesCounter + 1 });\n      });\n    };\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"test-container\">\n          <div className=\"test-timer-counter-container\">\n            <div>Questions: {this.state.currQuesCounter}/{this.QUESTIONS_LIST.length}</div>\n            <div>Timer: {this.state.timer}s</div>\n          </div>\n          <div className=\"card-container\">\n            <h2>{this.state.currQuestion.caption}</h2>\n            <h4>{this.state.currQuestion.question}</h4>\n            {this.state.currQuestion.options ?\n              (\n                <div className=\"test-option-container\">\n                  {\n                    this.state.currQuestion.options.map((option) => {\n                      return (\n                        <div className={`test-option ${this.state.selectedAnswer.indexOf(option) !== -1 ? 'selected' : ''}`}\n                          key={option}\n                          onClick={() => this.onOptionClick(option)}>\n                          {option}\n                        </div>\n                      )\n                    })\n                  }\n                </div>\n              ) : null}\n          </div>\n        </div>\n\n        <div className=\"btn-container center\">\n          <button disabled={!this.state.selectedAnswer.length ? true : false}\n            onClick={() => this.submitAnswer()}>\n            Submit\n          </button>\n        </div>\n      </>\n    );\n  };\n}","import React, { PureComponent } from 'react';\nimport Topics from '../Topics/Topics';\nimport { Topic } from '../../Models/Topics';\nimport { QUESTIONS } from '../../Models/Questions';\nimport Test from '../Test/Test';\n\nexport default class Quizes extends PureComponent {\n\n  state = {\n    STATE: 'topic'\n  }\n  testScore = {} as any;\n\n  onTestStartEmit(selectedTopic: Topic): void {\n    console.log(selectedTopic);\n    this.setState({ STATE: 'test' });\n  }\n\n  onTestEndEmit(testScore: any): void {\n    this.setState({ STATE: 'result' });\n    this.testScore = testScore;\n  }\n\n  retake(): void {\n    this.setState({ STATE: 'test' });\n  }\n\n  render() {\n    return (\n      <>\n        {\n          this.state.STATE === 'topic' ? (\n            <Topics onTestStartEmit={(selectedTopic: Topic) => this.onTestStartEmit(selectedTopic)} />\n          ) : null\n        }\n        {\n          this.state.STATE === 'test' ? (\n            <Test onTestEndEmit={(testScore: any) => this.onTestEndEmit(testScore)} questionsList={QUESTIONS} />\n          ) : null\n        }\n        {\n          this.state.STATE === 'result' ? (\n            <>\n              <div className=\"card-container\">\n                <h1>Test Result:</h1>\n                <h3>Total Questions: {this.testScore.total}</h3>\n                <h3>Correct: {this.testScore.correct}</h3>\n                <h3>Wrong: {this.testScore.wrong}</h3>\n              </div>\n\n              <div className=\"btn-container center\">\n                <button onClick={() => this.retake()}>\n                  Retake Test\n                </button>\n              </div>\n            </>\n          ) : null\n        }\n      </>\n    )\n  }\n}","import React from 'react';\nimport './Main.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  NavLink\n} from \"react-router-dom\";\nimport Videos from '../Videos/Videos';\nimport Quizes from '../Quizes/Quizes';\n\nconst Main = () => {\n  return (\n    <Router>\n      <div className=\"container\">\n        <div className=\"side-menu\">\n          <div className=\"side-menu-items\">\n            <NavLink exact to=\"/\" activeClassName=\"selected\">Video Stream</NavLink>\n          </div>\n          <div className=\"side-menu-items\">\n            <NavLink to=\"/quize\" activeClassName=\"selected\">Quizes</NavLink>\n          </div>\n        </div>\n        <div className=\"main\">\n          <Switch>\n            <Route exact path=\"/\">\n              <Videos />\n            </Route>\n            <Route path=\"/quize\">\n              <Quizes />\n            </Route>\n          </Switch>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default Main;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './components/Main/Main';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Main />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}