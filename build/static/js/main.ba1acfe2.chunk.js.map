{"version":3,"sources":["components/VideoPlayer/VideoPlayer.tsx","Models/General.ts","components/Videos/Videos.tsx","components/Quizes/Quizes.tsx","components/Main/Main.tsx","serviceWorker.ts","index.tsx"],"names":["VideoPlayer","width","controls","src","this","props","url","type","PureComponent","VIDEO","Videos","Quizes","Main","className","exact","to","activeClassName","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iTAMqBA,E,iLAEjB,OACE,2BAAOC,MAAM,MAAMC,UAAQ,GACzB,4BAAQC,IAAKC,KAAKC,MAAMC,IAAKC,KAAK,mB,GAJDC,iBCN5BC,EACN,YCSQC,EANA,WACb,OACE,kBAAC,EAAD,CAAaJ,IAAKG,KCIPE,EARA,WACb,OACE,wCCkCWC,EA3BF,WACX,OACE,kBAAC,IAAD,KACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,mBACb,kBAAC,IAAD,CAASC,OAAK,EAACC,GAAG,IAAIC,gBAAgB,YAAtC,iBAEF,yBAAKH,UAAU,mBACb,kBAAC,IAAD,CAASE,GAAG,SAASC,gBAAgB,YAArC,YAGJ,yBAAKH,UAAU,QACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACG,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,UACV,kBAAC,EAAD,YCjBMC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SDqI5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ba1acfe2.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\n\ninterface VideoPlayerProps {\n  url: any;\n}\n\nexport default class VideoPlayer extends PureComponent<VideoPlayerProps> {\n  render() {\n    return (\n      <video width=\"400\" controls>\n        <source src={this.props.url} type=\"video/mp4\" />\n      </video>\n    );\n  };\n}","export const VIDEO = {\n  url: 'video.mp4',\n  name: 'Big Buck Bunny'\n}","import React from 'react';\nimport VideoPlayer from '../VideoPlayer/VideoPlayer';\nimport { VIDEO } from '../../Models/General';\n\nconst Videos = () => {\n  return (\n    <VideoPlayer url={VIDEO.url} />\n  )\n}\n\nexport default Videos;","import React from 'react';\n\nconst Quizes = () => {\n  return (\n    <div>\n      Quizes\n    </div>\n  )\n}\n\nexport default Quizes;","import React from 'react';\nimport './Main.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  NavLink\n} from \"react-router-dom\";\nimport Videos from '../Videos/Videos';\nimport Quizes from '../Quizes/Quizes';\n\nconst Main = () => {\n  return (\n    <Router>\n      <div className=\"container\">\n        <div className=\"side-menu\">\n          <div className=\"side-menu-items\">\n            <NavLink exact to=\"/\" activeClassName=\"selected\">Video Stream</NavLink>\n          </div>\n          <div className=\"side-menu-items\">\n            <NavLink to=\"/quize\" activeClassName=\"selected\">Quizes</NavLink>\n          </div>\n        </div>\n        <div className=\"main\">\n          <Switch>\n            <Route exact path=\"/\">\n              <Videos />\n            </Route>\n            <Route path=\"/quize\">\n              <Quizes />\n            </Route>\n          </Switch>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default Main;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './components/Main/Main';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Main />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}